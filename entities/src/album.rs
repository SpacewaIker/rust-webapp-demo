//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

#[cfg(not(target_family = "wasm"))]
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[cfg_attr(
    not(target_family = "wasm"),
    derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)
)]
#[cfg_attr(
    target_family = "wasm",
    derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)
)]
#[cfg_attr(not(target_family = "wasm"), sea_orm(table_name = "album"))]
pub struct Model {
    #[cfg_attr(not(target_family = "wasm"), sea_orm(primary_key))]
    #[cfg_attr(not(target_family = "wasm"), serde(skip_deserializing))]
    pub id: i32,
    /// Non-empty album name
    pub name: String,
    /// Date of album release
    #[cfg(not(target_family = "wasm"))]
    pub date_published: Date,
    #[cfg(target_family = "wasm")]
    pub date_published: String,
}

#[cfg_attr(
    not(target_family = "wasm"),
    derive(Copy, Clone, Debug, EnumIter, DeriveRelation)
)]
#[cfg_attr(target_family = "wasm", derive(Copy, Clone, Debug))]
pub enum Relation {
    #[cfg_attr(
        not(target_family = "wasm"),
        sea_orm(has_many = "super::album_artist_mtm::Entity")
    )]
    AlbumArtistMtm,
    #[cfg_attr(not(target_family = "wasm"), sea_orm(has_many = "super::song::Entity"))]
    Song,
}

#[cfg(not(target_family = "wasm"))]
impl Related<super::album_artist_mtm::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AlbumArtistMtm.def()
    }
}

#[cfg(not(target_family = "wasm"))]
impl Related<super::song::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Song.def()
    }
}

#[cfg(not(target_family = "wasm"))]
impl ActiveModelBehavior for ActiveModel {}
